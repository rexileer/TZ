from aiogram import Router, F
from aiogram.types import Message, CallbackQuery

from services.cart_service import get_user_cart, add_to_cart, remove_from_cart, clear_cart
from services.products_service import get_product_details_from_db
from keyboards.cart_kb import get_cart_keyboard
from keyboards.products_kb import get_product_to_cart_keyboard
from keyboards import reply

router = Router()


@router.message(F.text == "Cart")
async def show_cart(message: Message):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    cart_products = await get_user_cart(user_id)
    
    if not cart_products:
        await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return
    
    text = "üõí **–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:**\n"
    total_price = 0

    for cart_product in cart_products:
        product = cart_product.product
        quantity = cart_product.quantity
        price = product.price * quantity
        total_price += price
        text += f"üõç **{product.name}** x{quantity} - ‚ÇΩ{price}\n"

    text += f"\nüí∞ **–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞:** ‚ÇΩ{total_price}"

    keyboard = await get_cart_keyboard(user_id)
    await message.answer(text, reply_markup=keyboard)


@router.callback_query(F.data == "clear_cart")
async def clear_cart_callback(callback: CallbackQuery):
    """–û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã"""
    user_id = callback.from_user.id
    await clear_cart(user_id)
    await callback.message.edit_text("üõí –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")
    await callback.answer()


@router.callback_query(F.data.startswith("set_quantity_"))
async def set_quantity_callback(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    product_id, quantity = map(int, callback.data.split("_")[2:])

    product = await get_product_details_from_db(product_id)
    if not product:
        await callback.message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await callback.message.answer(
        f"–í—ã –∂–µ–ª–∞–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å {quantity} —à—Ç. —Ç–æ–≤–∞—Ä–∞ **{product.name}** –≤ –∫–æ—Ä–∑–∏–Ω—É?",
        reply_markup=get_product_to_cart_keyboard(product_id, quantity)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("add_to_cart_"))
async def add_to_cart_callback(callback: CallbackQuery):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    product_id, quantity = map(int, callback.data.split("_")[3:])
    user_id = callback.from_user.id

    product = await get_product_details_from_db(product_id)
    if not product:
        await callback.message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await add_to_cart(user_id, product_id, quantity)

    await callback.message.delete()

    await callback.message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {quantity} —à—Ç. —Ç–æ–≤–∞—Ä–∞ **{product.name}** –≤ –∫–æ—Ä–∑–∏–Ω—É.", reply_markup=reply.main)
    await callback.answer()


@router.callback_query(F.data.startswith("remove_from_cart_"))
async def remove_from_cart_callback(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    product_id = int(callback.data.split("_")[3])
    user_id = callback.from_user.id

    product = await get_product_details_from_db(product_id)
    if not product:
        await callback.message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await remove_from_cart(user_id, product_id)
    
    keyboard = await get_cart_keyboard(user_id)
    await callback.message.edit_text(
        text="üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.",
        reply_markup=keyboard
    )
    await callback.answer(f"‚ùå {product.name} —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.")
