from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from services.order_to_excel import add_order_to_excel
from services.cart_service import get_user_cart, clear_cart
from services.orders_service import create_order
from services.payment_service import create_payment, check_payment_status

import logging
logger = logging.getLogger(__name__)

router = Router()

class DeliveryState(StatesGroup):
    waiting_for_delivery_data = State()  # –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏

@router.callback_query(F.data == "delivery")
async def delivery_method_callback(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    logger.info(f"User {user_id} triggered the delivery callback.")
    
    cart_products = await get_user_cart(user_id)
    if not cart_products:
        logger.warning(f"User {user_id} attempted to order, but the cart is empty.")
        await callback.message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É.")
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞
    text = "üìù –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:\n"
    total_price = 0
    for cart_product in cart_products:
        product = cart_product.product
        quantity = cart_product.quantity
        price = product.price * quantity
        total_price += price
        text += f"{product.name} x{quantity} - ‚ÇΩ{price}\n"

    text += f"\nüí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: ‚ÇΩ{total_price}"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSMContext
    await state.update_data(total_price=total_price, cart_products=cart_products)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
    logger.info(f"Total price for user {user_id} is ‚ÇΩ{total_price}. Requesting delivery data.")
    await callback.message.answer(text)
    await callback.message.answer("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–∞–¥—Ä–µ—Å, —Ç–µ–ª–µ—Ñ–æ–Ω –∏ —Ç.–¥.)")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(DeliveryState.waiting_for_delivery_data)
    await callback.answer()


@router.message(StateFilter(DeliveryState.waiting_for_delivery_data))
async def process_delivery_data(message: Message, state: FSMContext):
    try:
        state_data = await state.get_data()
        total_price = state_data.get("total_price")

        if not total_price:
            logger.error(f"Total price not found in FSM state for user {message.from_user.id}.")
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É–º–º—É –∑–∞–∫–∞–∑–∞.")
            return

        delivery_data = message.text
        await state.update_data(delivery_data=delivery_data)

        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ YooKassa
        logger.info(f"Creating payment for user {message.from_user.id} with total price ‚ÇΩ{total_price}.")
        payment_id, payment_url = await create_payment(
            user_id=message.from_user.id, amount=total_price
        )
        

        if not payment_id:
            logger.error(f"Failed to create payment for user {message.from_user.id}.")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º payment_id –≤ FSMContext
        await state.update_data(payment_id=payment_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
        pay_markup = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
                [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_payment")]
            ]
        )

        logger.info(f"Payment created for user {message.from_user.id}, sending payment link.")
        await message.answer(
            f"üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {total_price} ‚ÇΩ\n\n"
            "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –µ–≥–æ.\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'.",
            reply_markup=pay_markup
        )

    except Exception as e:
        logger.error(f"Error in process_delivery_data for user {message.from_user.id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞.")


@router.callback_query(F.data == "check_payment")
async def check_payment_callback(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"""
    try:
        state_data = await state.get_data()
        payment_id = state_data.get("payment_id")

        if not payment_id:
            logger.warning(f"Payment ID not found for user {callback.from_user.id}.")
            await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞.")
            return

        status = await check_payment_status(payment_id)

        if status == "succeeded":
            user_id = callback.from_user.id
            total_price = state_data.get("total_price")
            delivery_data = state_data.get("delivery_data")

            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
            logger.info(f"Payment succeeded for user {user_id}, creating order.")
            order = await create_order(user_id, total_price, delivery_data)

            if order:
                logger.info(f"Order {order.id} created for user {user_id}, adding to Excel.")
                await add_order_to_excel({
                    "order_id": order.id,
                    "user_id": user_id,
                    "total_price": total_price,
                    "delivery_data": delivery_data,
                    "date": order.created_at
                })
                
                # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
                await clear_cart(user_id)
                logger.info(f"Order {order.id} successfully completed for user {user_id}. Cart cleared.")
                await callback.message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω. üöÄ")
            else:
                logger.error(f"Failed to create order for user {user_id}.")
                await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.")

            await state.clear()
        else:
            logger.warning(f"Payment for user {callback.from_user.id} not found or not confirmed.")
            await callback.message.answer("‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        await callback.answer()

    except Exception as e:
        logger.error(f"Error in check_payment_callback for user {callback.from_user.id}: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã.")
