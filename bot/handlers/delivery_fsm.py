from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.types import Message, CallbackQuery
from services.cart_service import get_user_cart
from services.orders_service import create_order

router = Router()

class DeliveryState(StatesGroup):
    waiting_for_delivery_data = State()  # –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏

@router.callback_query(F.data == "delivery")
async def delivery_method_callback(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    cart_products = await get_user_cart(user_id)

    if not cart_products:
        await callback.message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É.")
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞
    text = "üìù –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:\n"
    total_price = 0
    for cart_product in cart_products:
        product = cart_product.product
        quantity = cart_product.quantity
        price = product.price * quantity
        total_price += price
        text += f"{product.name} x{quantity} - ${price}\n"

    text += f"\nüí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: ${total_price}"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSMContext
    await state.update_data(total_price=total_price, cart_products=cart_products)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
    await callback.message.answer(text)
    await callback.message.answer("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–∞–¥—Ä–µ—Å, —Ç–µ–ª–µ—Ñ–æ–Ω –∏ —Ç.–¥.)")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(DeliveryState.waiting_for_delivery_data)
    await callback.answer()

@router.message(StateFilter(DeliveryState.waiting_for_delivery_data))
async def process_delivery_data(message: Message, state: FSMContext):
    try:
        print("–§—É–Ω–∫—Ü–∏—è process_delivery_data –≤—ã–∑–≤–∞–Ω–∞")
        state_data = await state.get_data()
        total_price = state_data.get("total_price")
        
        if not total_price:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É–º–º—É –∑–∞–∫–∞–∑–∞.")
            return
        
        delivery_data = message.text
        print(f"–°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑: user_id={message.from_user.id}, total_price={total_price}, delivery_data={delivery_data}")

        order = await create_order(
            user_id=message.from_user.id,
            total_price=total_price,
            delivery_data=delivery_data
        )

        if not order:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.")
            return

        await message.answer(f"‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! üöÄ\n–î–æ—Å—Ç–∞–≤–∫–∞: {delivery_data}\n–°—É–º–º–∞: {total_price}$")

        await state.clear()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_delivery_data: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.")
